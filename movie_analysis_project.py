# -*- coding: utf-8 -*-
"""Movie Analysis Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_xMeIBV8Bue7MXDbo3l0jusKjMBy2wfI
"""

# Commented out IPython magic to ensure Python compatibility.
#Movie Analysis By Wendel Burlat

# Import necessary libraries for data analysis and visualization
import pandas as pd
import numpy as np
import seaborn as sns

import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib
plt.style.use('ggplot')


# Set the default figure size
from matplotlib.pyplot import figure

# %matplotlib inline
matplotlib.rcParams['figure.figsize'] = (12,8)

# Disable warnings for chained assignment
pd.options.mode.chained_assignment = None



# Now we need to read in the data
df = pd.read_csv(r'C:\Users\wendel\Downloads\movies.csv')

# Now let's take a look at the data

df

# We need to see if we have any missing data
# Let's loop through the data and see if there is anything missing

for col in df.columns:
    pct_missing = np.mean(df[col].isnull())
    print('{} - {}%'.format(col, round(pct_missing*100)))

# Data Types for our columns

print(df.dtypes)

# Are there any Outliers?

df.boxplot(column=['gross'])

df.drop_duplicates()

# Order our Data a little bit to see

df.sort_values(by=['gross'], inplace=False, ascending=False)

# Disable warnings for chained assignment

sns.regplot(x="gross", y="budget", data=df)

sns.regplot(x="score", y="gross", data=df)

# Correlation Matrix between all numeric columns
# Calculate correlation matrices using various methods and visualize them using heatmaps
df.corr(method ='pearson')

df.corr(method ='kendall')

df.corr(method ='spearman')

correlation_matrix = df.corr()

sns.heatmap(correlation_matrix, annot = True)

plt.title("Correlation matrix for Numeric Features")

plt.xlabel("Movie features")

plt.ylabel("Movie features")

plt.show()

# Using factorize - this assigns a random numeric value for each unique categorical value
# Calculate a correlation matrix for categorical data

df.apply(lambda x: x.factorize()[0]).corr(method='pearson')

correlation_matrix = df.apply(lambda x: x.factorize()[0]).corr(method='pearson')

sns.heatmap(correlation_matrix, annot = True)

plt.title("Correlation matrix for Movies")

plt.xlabel("Movie features")

plt.ylabel("Movie features")

plt.show()

# Analyze correlations between categorical variables
correlation_mat = df.apply(lambda x: x.factorize()[0]).corr()

corr_pairs = correlation_mat.unstack()

print(corr_pairs)

sorted_pairs = corr_pairs.sort_values(kind="quicksort")

print(sorted_pairs)

# We can now take a look at the ones that have a high correlation (> 0.5)

strong_pairs = sorted_pairs[abs(sorted_pairs) > 0.5]

print(strong_pairs)

# Analyze top 15 companies by gross revenue

CompanyGrossSum = df.groupby('company')[["gross"]].sum()

CompanyGrossSumSorted = CompanyGrossSum.sort_values('gross', ascending = False)[:15]

CompanyGrossSumSorted = CompanyGrossSumSorted['gross'].astype('int64')

CompanyGrossSumSorted

# Group and analyze gross revenue by company and year
df['Year'] = df['released'].astype(str).str[:4]
df

df.groupby(['company', 'year'])[["gross"]].sum()

CompanyGrossSum = df.groupby(['company', 'year'])[["gross"]].sum()

CompanyGrossSumSorted = CompanyGrossSum.sort_values(['gross','company','year'], ascending = False)[:15]

CompanyGrossSumSorted = CompanyGrossSumSorted['gross'].astype('int64')

CompanyGrossSumSorted

# Group and analyze gross revenue by company
CompanyGrossSum = df.groupby(['company'])[["gross"]].sum()

CompanyGrossSumSorted = CompanyGrossSum.sort_values(['gross','company'], ascending = False)[:15]

CompanyGrossSumSorted = CompanyGrossSumSorted['gross'].astype('int64')

CompanyGrossSumSorted

# Create a scatter plot to visualize the relationship between 'budget' and 'gross'
plt.scatter(x=df['budget'], y=df['gross'], alpha=0.5)
plt.title('Budget vs Gross Earnings')
plt.xlabel('Gross Earnings')
plt.ylabel('Budget for Film')
plt.show()

df

# Convert categorical columns to numerical values for correlation analysis
df_numerized = df


for col_name in df_numerized.columns:
    if(df_numerized[col_name].dtype == 'object'):
        df_numerized[col_name]= df_numerized[col_name].astype('category')
        df_numerized[col_name] = df_numerized[col_name].cat.codes

df_numerized

df_numerized.corr(method='pearson')

correlation_matrix = df_numerized.corr(method='pearson')

sns.heatmap(correlation_matrix, annot = True)

plt.title("Correlation matrix for Movies")

plt.xlabel("Movie features")

plt.ylabel("Movie features")

plt.show()

for col_name in df.columns:
    if(df[col_name].dtype == 'object'):
        df[col_name]= df[col_name].astype('category')
        df[col_name] = df[col_name].cat.codes

df[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes)

df

# Create swarm and strip plots to visualize the relationship between 'rating' and 'gross'
sns.swarmplot(x="rating", y="gross", data=df)

sns.stripplot(x="rating", y="gross", data=df)